var texto:any = document.getElementById("title");
texto.innerHTML ="Data Types in TypeScript";
console.log("-----------------------------------------");
console.log("About Boolean :");
//1-Boolean :
//1.1-Returning true:
//let testOne: boolean = true;
/*if(testOne){
  alert(testOne) 
}
else{
  alert(!testOne);
}*/

//1.2-Returning false:
/*let testOne: boolean = false;

if(!testOne){
  alert(testOne)
}

else{
  alert(!testOne)
}*/

//2-Numbaer:

//2.1 returning number:
console.log("----------------------------------------");
console.log("About Number :");
console.log("----------------------------------------");
let numberOne: number = 177;
let numberTwo: number = 1.24
let numberThree:number = 0.997;

console.log("this is value of number one:",numberOne);
console.log("this is value of number two:",numberTwo);
console.log("this is value of number three:",numberThree);

//3-String: 
//3.1-Returning string:
console.log("----------------------------------------");
console.log("About String :");
console.log("----------------------------------------");
let firstName:string = "Franicsco";
let lastName:string = "Inoque";
console.log("Thsis value of firstName: ",firstName );
console.log("Thsis value of lasttName: ",lastName );
//4-Array
//4.1- Returning array:
console.log("----------------------------------------");
console.log("About Array :");
console.log("----------------------------------------");

let colors:string[] = ['red','blue', 'pink','green'];
console.log(colors[0]);
console.log(colors[1]);
console.log(colors[2]);
console.log(colors[3]);
for(let i = 0; i<= colors.length; i++){
//console.log(colors[i])
//alert(colors[i]);
}


//4.2- Another way to declare array:

let numberOfstudent:Array<number> =[1,3,98, 8,2,6 ];
console.log(numberOfstudent[0]);
console.log(numberOfstudent[1]);
console.log(numberOfstudent[2]);
console.log(numberOfstudent[3]);
console.log(numberOfstudent[4]);
console.log(numberOfstudent[5]);

for(let i =0; i<=numberOfstudent.length; i++){
  console.log(numberOfstudent[i]);
}


//5-Enums
console.log("----------------------------------------");
console.log("About Enum :");
console.log("----------------------------------------");

enum Names {Fname ="Francisco", Mname ="Jaime", Lname="Inoque"};
let fullName: Array<Names> = [Names.Fname, Names.Mname, Names.Lname];

console.log(fullName[2]);

//5.1 changing the position:

enum myNote {
  noteOne,
  noteTwo,
  noteThree,
  noteFour,
  noteFive
}

let showmyNote:myNote = myNote.noteFive;
console.log(showmyNote)
console.log("---------Changed----------")

enum myNoteChagedPosition {
  noteOne=13,
  noteTwo,
  noteThree,
  noteFour,
  noteFive
}

let showmyNoteCha:myNoteChagedPosition = myNoteChagedPosition.noteFive;
console.log("Position changed: ", showmyNoteCha);




//6-Tuple
console.log("----------------------------------------");
console.log("About Tuple:");
console.log("----------------------------------------");
let schoolSituation: [string, number, boolean];
 schoolSituation = ['Farncisco Inoque',17,true]
 
 console.log('Name: ',schoolSituation[0]);
 console.log('Note ',schoolSituation[1]);
 console.log('Situation: ',schoolSituation[2]);

 for(let x = 0; x<=schoolSituation.length; x++){
   console.log(schoolSituation[x]);
 }

//7.Any
console.log("----------------------------------------");
console.log("About Any :");
console.log("----------------------------------------");

/*O any nos ajuda a trabalhar com variaveis que nÃ£o retorna um tipo de dado especifico, quando usamos o Any, estamos assumindo que o dado pode que iremos receber em determinado caso pode ser de qualquer tipo.
Diga em determinado, porque o seu codigo nÃ£o precisa ser feito todo de Any, nÃ£o acha?. Mas Ã© claro meu amigo. Por exemplo, quando falamos de Array, na declaraÃ§Ã£o da variavel, informavamos que tipo de dados esse Array deveria receber, isto Ã©, ou number, ou string, ou entÃ£o boolean assim por diante, entÃ£o aqui nÃ³s diremos, Array recebe qualquer coisa.EntÃ£o vamos ao codigo:
*/

let tobeBoolean :any = true;
let tobeNumber : any = 2019;
let tobeObject :any = {
  firstOne:"",
  lastOne:""
}

let tobeString:any = "Hello World";
let tobeArray :any = ["Blue","Red", "ETC"];
let tobeUndefined :any = undefined;
let tobeNull : any = null;

// Nota bem:

/* Existem tipos de dados que o Any nÃ£o pode receber directamente, mas Ã© possivel passar para ele sim mas por meio de algumas maluquice.ðŸ˜… ðŸ˜… ðŸ˜… ðŸ˜… ðŸ˜… ðŸ˜… ðŸ˜… ðŸ˜… ðŸ˜…. Como  o Enum e o Void.
EntÃ£o vamos a isso:*/
//Enum:

enum alunos {
  nome = "Francisco",
  apelido = "Inoque"
}

let aluno :any = alunos.nome+" "+alunos.apelido;

console.log(`O meu nome Ã© ${aluno}`);

//Void: 

function printNewname(): void {
  let person :string = 'Francisco Jone Inoque';
  console.log(person);
}

let callPrintNewName :any = printNewname();

callPrintNewName;

//8. Void

console.log("----------------------------------------");
console.log("About Void :");
console.log("----------------------------------------");

/* O Void Ã© um pouco confundido com o Any, tem quase mesmo comportamento, se prestarmos atenÃ§Ã£o notaremos que o void se diferÃªncia do Any pelo facto de nÃ£o retornar nada, Void Ã© ausÃªncia de qualquer tipo de dados, entÃ£o podemos dizer que Void Ã© um pouco oposto de any, em quanto Any retorna qualquer tipo de dados, o Void nÃ£o retorna nada.*/

function funcVoid(): void {
  let name: string = "Meu nome Ã© Francisco";
  /*Se vocÃª escrever o seguinte:
  return name, verÃ¡ uma notificÃ£o de erro de compilaÃ§Ã£o no cÃ³digo, dizendo o seguinte:
  Type 'string' is not assignable to type 'void', isto Ã©, o Tipo String nÃ£o Ã© atribuÃ­vel ao Tipo Void. Mas no void podemos retornar dados do tipo Any*/
//return name;
 console.log(name)
 }

 function funcVoid2(personName:string): void {
  let name: any =undefined;
  return name
 }


funcVoid();

console.log(funcVoid2("Larissa Jacob"));

//9. Void

console.log("----------------------------------------");
console.log("About Null and Undefined :");
console.log("----------------------------------------");



//Nota: 
/*Por padrÃ£o null e undefined sÃ£o subtipos de todos os outros tipos. Isso
significa que vocÃª pode atribuir null e undefined algo parecido number */
let userName : undefined = undefined;
let uid : null = null;


console.log(userName);
console.log(uid)



//10. Never

console.log("----------------------------------------");
console.log("About Never :");
console.log("----------------------------------------");


/*O never tipo representa o tipo de valores que nunca ocorrem. Por
exemplo, never Ã© o tipo de retorno para uma expressÃ£o de funÃ§Ã£o ou uma
expressÃ£o de funÃ§Ã£o de seta que sempre lanÃ§a uma exceÃ§Ã£o ou uma que
nunca retorna; VariÃ¡veis tambÃ©m adquirem o tipo never quando estreitadas por qualquer tipo de guardas que nunca podem ser
verdadeiras.  O never tipo Ã© um subtipo de e atribuÃ­vel a todos os tipos; no entanto,
nenhum tipo Ã© um subtipo ou atribuÃ­vel a never (exceto a never si
prÃ³prio). Mesmo any nÃ£o Ã© atribuÃ­vel a never .*/

function error (message: string ): never {
  throw new Error (message);
  }


  



//11. Object

console.log("----------------------------------------");
console.log("About Object :");
console.log("----------------------------------------");



/*object Ã© um tipo que representa o tipo nÃ£o primitivo, isto Ã©, qualquer
coisa que nÃ£o Ã© number , string , boolean , symbol , null , ou undefined .
Com o object tipo, as APIs Object.create podem ser melhor
representadas. Por exemplo:*/

declare function create (o: object | null |string | number | boolean | undefined ): void ;

create({ prop: 0 }); // OK
create( null ); // OK
create(42); // OK
create( "string" ); // Ok
create( false ); // Ok
create( undefined ); // Ok
